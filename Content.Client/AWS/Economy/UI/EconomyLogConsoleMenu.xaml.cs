using Content.Client.UserInterface.Controls;
using Content.Shared.AWS.Economy;
using Content.Client.AWS.Economy.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using System.Linq;

namespace Content.Client.AWS.Economy.UI;

[GenerateTypedNameReferences]
public sealed partial class EconomyLogConsoleMenu : FancyWindow
{
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    private EconomyLogConsoleBoundUserInterface Owner { get; set; }
    private Dictionary<string, EconomyBankAccountComponent> _accounts;
    public EconomyLogConsoleMenu(EconomyLogConsoleBoundUserInterface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        var economyBankAccount = _entitySystem.GetEntitySystem<EconomyBankAccountSystemShared>();

        LogDetails.SelectMode = ItemList.ItemListSelectMode.None;

        Owner = owner;
        _accounts = economyBankAccount.GetAccounts();

        FillList();

        FindAccount.OnTextEntered += OnTextEnteredAccount;
        FindLog.OnTextEntered += OnTextEnteredLog;

    }

    private void OnSelectAccount(ItemList.Item accountId)
    {
        LogDetails.Clear();

        var accountComponent = (accountId.Metadata! as EconomyBankAccountComponent)!;

        if (accountComponent.Logs.Count == 0)
        {
            LogDetails.AddItem("No logs detected");
            return;
        }
        for (int i = accountComponent.Logs.Count - 1; i != -1; i--)
        {
            var item = accountComponent.Logs[i];
            LogDetails.AddItem("[" + item.Date.ToString("hh\\:mm\\:ss") + "] — " + item.Text);
        }
    }

    private void OnTextEnteredAccount(LineEdit.LineEditEventArgs eventArgs)
    {
        AccountList.Clear();
        var upText = eventArgs.Text.ToUpper();
        foreach (var (key, value) in _accounts)
        {
            var fieldName = FormFieldName(value);
            if (fieldName.Contains(upText))
            {
                var field = AccountList.AddItem(fieldName);
                field.Metadata = value;
                field.OnSelected += OnSelectAccount;
            }
        }
        if (AccountList.Count == 0)
        {
            AccountList.AddItem("No data acquired");
            return;
        }
        AccountList.SortItemsByText();
    }
    private void OnTextEnteredLog(LineEdit.LineEditEventArgs eventArgs)
    {

        if (!AccountList.GetSelected().Any())
        {
            LogDetails.Clear();
            LogDetails.AddItem("Error no select Account");
            return;
        }
        var accountId = AccountList.GetSelected().First();
        LogDetails.Clear();
        var upText = eventArgs.Text.ToUpper();

        var accountComponent = (accountId.Metadata! as EconomyBankAccountComponent)!;

        for (int i = accountComponent.Logs.Count - 1; i != -1; i--)
        {
            var item = accountComponent.Logs[i];
            if (item.Text.Contains(upText))
                LogDetails.AddItem("[" + item.Date.ToString("hh\\:mm\\:ss") + "] — " + item.Text);
        }
    }

    private void FillList()
    {
        foreach (var (key, value) in _accounts)
        {
            var field = AccountList.AddItem(FormFieldName(value));
            field.Metadata = value;
            field.OnSelected += OnSelectAccount;
        }
        AccountList.SortItemsByText();
    }

    private string FormFieldName(EconomyBankAccountComponent comp)
    {
        return comp.AccountId + " — " + comp.AccountName;
    }
}
